<project name="patchmanager" basedir="." default="info">

	<property name="installer.dir" value="installer" />
	<property name="build.dir" value="build" />
	<property name="dist.dir" value="dist/patchmanager" />
	<property name="osxdist" value="osx-dist"/>
	<property name="dist-debug.dir" value="dist/patchmanager-debug" />
	<property name="source.dir" value="src" />
	<property name="doc.dir" value="docs" />
	<property name="javadoc.dir" value="docs/api" />
	<property name="lib.dir" value="lib" />
	<property name="classpath" value="lib/jcip-annotations.jar:lib/swing-layout.jar:lib/commons-codec.jar:lib/httpclient.jar:lib/httpcore.jar:lib/httpcore-nio.jar:lib/log4j.jar:lib/commons-logging.jar:lib/httpcore.jar:lib/httpmime.jar"/>
	<property name="jarclasspath" value="lib/jcip-annotations.jar lib/swing-layout.jar lib/commons-codec.jar lib/httpclient.jar lib/httpcor.jar lib/httpcore-nio.jar lib/log4j.jar lib/commons-logging.jar lib/httpcore.jar lib/httpmime.jar resources/ midi-send/ ."/>
	<property name="launch4j.dir" location="/opt/launch4j" />
	
	<path id ="class.path">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path> 
	<path id ="jar.class.path">
		<fileset dir="${dist.dir}">
			<include name="lib/*.jar"/>
		</fileset>     
		<pathelement path="${dist.dir}/resources"/>
		<pathelement path="${dist.dir}/midi-send"/>
	</path> 
	
	<target name="info" description="build script info" >
		<echo>PatchManager ANT build script (http://ruinwesen.com/)
		Following targets are available:
		dist       - Builds the PatchManager release version.
		distdebug  - Builds the PatchManager debug version.

		run        - Runs the PatchManager release version.
		debug      - Runs the PatchManager debug version.
		This version may have features enabled which are currently in
		development. This version collects more log data than the
		release build.

		clean      - Removes generates files.
		</echo>
	</target>
	<!-- deletes all generated content -->
	<target name="clean">
		<!-- delete the javadoc api directory -->
		<delete dir="${javadoc.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete file="dist/patchmanager.tar.gz"/>
		<delete dir="${dist-debug.dir}"/>
		<delete dir="${build.dir}"/>
	</target>

	<target name="increment-build-number">
		<propertyfile file="${source.dir}/version.properties" comment="Do not edit this file!!!">
			<entry key="patchmanager.build.number" type="int"
						 operation="+"
						 default="1" />
			<entry  key="patchmanager.build.timestamp" type="date" value="now" />
		</propertyfile>
		
		<!-- make properties available to this build script -->
		<loadproperties srcFile="${source.dir}/version.properties" />
	</target>

	

	<target name="build" depends="increment-build-number">
		<mkdir dir="${build.dir}/classes"/>
		<copy file="${source.dir}/version.properties" todir="${build.dir}" />
		<javac
				destdir="${build.dir}/classes"
				source="1.5" debug="on"
				target="1.5" classpathref="class.path">
			<src path="${source.dir}" />
			<include name="com/**" />
			<include name="name/**" />
		</javac>
	</target>
	
	<target name="dist" depends="build">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/lib"/>
		<copy todir="${dist.dir}/lib">     
			<fileset dir="lib/"/> 
		</copy>
		<copy file="LICENSE.txt" todir="${dist.dir}" />
		<copy file="${build.dir}/version.properties" todir="${dist.dir}" />
		<copy file="${source.dir}/log4j-dist.properties" tofile="${dist.dir}/log4j.properties" />
		<copy todir="${dist.dir}/resources">     
			<fileset dir="${source.dir}/resources"/> 
		</copy>
		<!--
				<copy todir="${dist.dir}/installer/unix">     
				<fileset dir="${installer.dir}/unix"/> 
				</copy>
				<copy file="${installer.dir}/unix-install.sh" todir="${dist.dir}" />
				<copy file="${installer.dir}/unix-uninstall.sh" todir="${dist.dir}" />
		-->
		<mkdir dir="${dist.dir}/midi-send"/>
		<mkdir dir="${dist.dir}/midi-send/windows"/>
		<mkdir dir="${dist.dir}/midi-send/unix"/>
		<mkdir dir="${dist.dir}/midi-send/mac"/>
		
		<copy todir="${dist.dir}/midi-send/windows">     
			<fileset dir="${source.dir}/midi-send/windows"/> 
		</copy>
		<!-- keep executable permissions in mac binary -->
		<exec executable="cp"> 
			<arg value="-p" />
			<arg value="${basedir}/${source.dir}/midi-send/mac/midi-send" />
			<arg value="${basedir}/${dist.dir}/midi-send/mac/midi-send" />
		</exec> 
		<!-- keep executable permissions in linux binary -->
		<exec executable="cp"> 
			<arg value="-p" />
			<arg value="${basedir}/${source.dir}/midi-send/unix/midi-send" />
			<arg value="${basedir}/${dist.dir}/midi-send/unix/midi-send" />
		</exec> 
		
		<manifestclasspath property="jar.manifest.class.path" jarfile="${dist.dir}/patchmanager.jar">
			<classpath refid="jar.class.path" />
		</manifestclasspath>

		<jar destfile="${dist.dir}/patchmanager.jar" basedir="${build.dir}/classes">
			<manifest>      
				<attribute name="Built-By" value="${user.name}"/> 
				<attribute name="Specification-Vendor" value="Ruin&amp;Wesen"/>      
				<attribute name="Specification-Title" value="PatchManager"/>
				<attribute name="Implementation-Vendor" value="Ruin&amp;Wesen"/>      
				<attribute name="Implementation-Title" value="com.ruinwesen.patchmanager"/>
				<attribute name="Implementation-Version" value="${patchmanager.version}-b${patchmanager.build.number}"/>
				<attribute name="Main-Class" value="com.ruinwesen.patchmanager.swing.SwingPatchManager"/>   
				<attribute name="Class-Path" value="${jarclasspath}"/>    
			</manifest>
		</jar>
	</target>

	<target name="run" depends="dist">
		<java jar="${dist.dir}/patchmanager.jar"
					dir="${dist.dir}"
					fork="true"
					failonerror="true">
			<!--
					<arg value="-h"/>
					<classpath>
					<pathelement location="dist/test.jar"/>
					<pathelement path="${java.class.path}"/>
					</classpath> -->   
		</java>
	</target>

	<target name="distdebug" depends="dist">
		<copy todir="${dist-debug.dir}">
			<fileset dir="${dist.dir}"/> 
		</copy>
		<!-- we use different configuration for debug build -->
		<delete file="${dist-debug.dir}/log4j.properties" />
		<copy file="${source.dir}/log4j.properties" tofile="${dist-debug.dir}/log4j.properties" />
	</target>

	<target name="debug" depends="distdebug">
		<java jar="${dist-debug.dir}/patchmanager.jar"
					dir="${dist-debug.dir}"
					fork="true"
					failonerror="true">  
			<!-- enable debugging globally -->
			<jvmarg value="-Dname.cs.csutils.debug.Debug#debug=true" />
		</java>
	</target>

	<target name="release" depends="dist">
		<tar longfile="gnu"
				 destfile="dist/patchmanager.tar"
				 basedir="${dist.dir}"
				 >
			<tarfileset dir="." mode="755" username="patchmanager" group="users">
				<include name="midi-send/mac/midi-send" />
				<include name="midi-send/unix/midi-send" />
			</tarfileset>
			<tarfileset dir="." username="patchmanager" group="users">
				<include name="${dist.name}/**"/>
				<exclude name="midi-send/mac/midi-send" />
				<exclude name="midi-send/unix/midi-send" />
			</tarfileset>
		</tar>
		<gzip src="dist/patchmanager.tar" destfile="dist/patchmanager.tar.gz"/>
		<delete file="dist/patchmanager.tar"/>
		
		
	</target>

	<taskdef name="jarbundler"
					 classpath="ant/jarbundler-1.9.jar"
					 classname="net.sourceforge.jarbundler.JarBundler" />

	<target name="osx-dist" depends="jarbundle-osx-dist">
		<copy file="${doc.dir}/README.txt" todir="${osxdist}"/>
		<exec executable="chmod"> 
			<arg value="+x" />
			<arg value="${basedir}/${osxdist}/PatchManager.app/Contents/Resources/Java/midi-send/mac/midi-send"/>
		</exec>
		<exec executable="chmod"> 
			<arg value="+x" />
			<arg value="${basedir}/${osxdist}/PatchManagerJava5.app/Contents/Resources/Java/midi-send/mac/midi-send"/>
		</exec>
		<exec executable="chmod"> 
			<arg value="+x" />
			<arg value="${basedir}/${osxdist}/PatchManagerAdmin.app/Contents/Resources/Java/midi-send/mac/midi-send"/>
		</exec>
		
	</target>


	<target name="jarbundle-osx-dist" depends="dist,clean-osx-dist">
		<mkdir dir="${osxdist}"/>
		<jarbundler dir="${osxdist}"
								icon="osx-artwork/firmwareflash.icns"
								name="PatchManager"
								mainclass="com.ruinwesen.patchmanager.swing.SwingPatchManager"
								jvmversion="1.6*"
								workingdirectory="$APP_PACKAGE/Contents/Resources/Java">
			<jarfilelist dir="${dist.dir}" files="patchmanager.jar"/>
			<javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
			<javafileset dir="${dist.dir}">
				<include name="**/*"/>
			</javafileset>
		</jarbundler>
		<jarbundler dir="${osxdist}"
								icon="osx-artwork/firmwareflash.icns"
								name="PatchManagerJava5"
								mainclass="com.ruinwesen.patchmanager.swing.SwingPatchManager"
								jvmversion="1.5*"
								workingdirectory="$APP_PACKAGE/Contents/Resources/Java">
			<jarfilelist dir="${dist.dir}" files="patchmanager.jar"/>
			<javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
			<javafileset dir="${dist.dir}">
				<include name="**/*"/>
			</javafileset>
		</jarbundler>
		<jarbundler dir="${osxdist}"
								icon="osx-artwork/firmwareflash.icns"
								name="PatchManagerAdmin"
								mainclass="com.ruinwesen.patchmanager.swing.SwingPatchManager"
								jvmversion="1.6*"
								arguments="-admin"
								workingdirectory="$APP_PACKAGE/Contents/Resources/Java">
			<jarfilelist dir="${dist.dir}" files="patchmanager.jar"/>
			<javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
			<javafileset dir="${dist.dir}">
				<include name="**/*"/>
			</javafileset>
		</jarbundler>
	</target>

	<target name="osx-dist-faderfox" depends="dist,clean-osx-dist">
		<mkdir dir="${osxdist}"/>
		<jarbundler dir="${osxdist}"
								icon="osx-artwork/firmwareflash.icns"
								name="FaderfoxUpdate"
								mainclass="com.ruinwesen.patchmanager.swing.wizards.FaderfoxMidiSendWizard"
								jvmversion="1.6*"
								workingdirectory="$APP_PACKAGE/Contents/Resources/Java">
			<jarfilelist dir="${dist.dir}" files="patchmanager.jar"/>
			<javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
			<javafileset dir="${dist.dir}">
				<include name="**/*"/>
			</javafileset>
		</jarbundler>
		<jarbundler dir="${osxdist}"
								icon="osx-artwork/firmwareflash.icns"
								name="FaderfoxUpdate5"
								mainclass="com.ruinwesen.patchmanager.swing.wizards.FaderfoxMidiSendWizard"
								jvmversion="1.5*"
								workingdirectory="$APP_PACKAGE/Contents/Resources/Java">
			<jarfilelist dir="${dist.dir}" files="patchmanager.jar"/>
			<javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
			<javafileset dir="${dist.dir}">
				<include name="**/*"/>
			</javafileset>
		</jarbundler>
		<exec executable="chmod"> 
			<arg value="+x" />
			<arg value="${basedir}/${osxdist}/FaderfoxUpdate.app/Contents/Resources/Java/midi-send/mac/midi-send"/>
		</exec>
		<exec executable="chmod"> 
			<arg value="+x" />
			<arg value="${basedir}/${osxdist}/FaderfoxUpdate5.app/Contents/Resources/Java/midi-send/mac/midi-send"/>
		</exec>
	</target>
	
	<target name="clean-osx-dist">
		<delete dir="${osxdist}"/>
	</target>

	<taskdef name="launch4j"
					 classname="net.sf.launch4j.ant.Launch4jTask"
					 classpath="${launch4j.dir}/launch4j.jar
											:${launch4j.dir}/lib/xstream.jar" />

	<target name="win-dist" depends="dist">
		<launch4j configfile="win-launch4j.xml" />
	</target>

	<target name="win-faderfox-dist" depends="dist">
		<launch4j configfile="win-launch4j-faderfox.xml" />
	</target>
	

	<!-- creates the javadoc api -->
	<target name="javadoc">
		<javadoc
				packagenames="com.ruinwesen.*,name.cs.csutils.*"
				sourcepath="${source.dir}"
				excludepackagenames=""
				destdir="${javadoc.dir}"
				author="true"
				version="true"
				use="true"
				windowtitle="PatchManager API">    
			<doctitle><![CDATA[<h1>Test</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2009 Ruin&amp;Wesen All Rights Reserved.</i>]]></bottom>
			<tag name="todo" scope="all" description="To do:"/>
			<!-- <group title="Group 1 Packages" packages="com.dummy.test.a*"/>
					 <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/>
					 <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:\tmp"/> -->
			<link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
		</javadoc>
	</target>
	
</project>
